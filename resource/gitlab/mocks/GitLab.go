// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import gitlab "gitlack/resource/gitlab"
import mock "github.com/stretchr/testify/mock"
import model "gitlack/model"

// GitLab is an autogenerated mock type for the GitLab type
type GitLab struct {
	mock.Mock
}

// GetProject provides a mock function with given fields:
func (_m *GitLab) GetProject() ([]*model.Project, error) {
	ret := _m.Called()

	var r0 []*model.Project
	if rf, ok := ret.Get(0).(func() []*model.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleCommit provides a mock function with given fields: _a0, _a1
func (_m *GitLab) GetSingleCommit(_a0 int, _a1 string) (*gitlab.Commit, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gitlab.Commit
	if rf, ok := ret.Get(0).(func(int, string) *gitlab.Commit); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Commit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagList provides a mock function with given fields: _a0
func (_m *GitLab) GetTagList(_a0 int) ([]*gitlab.Tag, error) {
	ret := _m.Called(_a0)

	var r0 []*gitlab.Tag
	if rf, ok := ret.Get(0).(func(int) []*gitlab.Tag); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields:
func (_m *GitLab) GetUser() ([]*gitlab.GitLabUser, error) {
	ret := _m.Called()

	var r0 []*gitlab.GitLabUser
	if rf, ok := ret.Get(0).(func() []*gitlab.GitLabUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.GitLabUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
