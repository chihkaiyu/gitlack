// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import slack "gitlack/resource/slack"

// Slack is an autogenerated mock type for the Slack type
type Slack struct {
	mock.Mock
}

// GetUser provides a mock function with given fields:
func (_m *Slack) GetUser() ([]*slack.SlackUser, error) {
	ret := _m.Called()

	var r0 []*slack.SlackUser
	if rf, ok := ret.Get(0).(func() []*slack.SlackUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*slack.SlackUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostSlackMessage provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Slack) PostSlackMessage(_a0 string, _a1 string, _a2 *slack.Attachment, _a3 ...string) (*slack.MessageResponse, error) {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *slack.MessageResponse
	if rf, ok := ret.Get(0).(func(string, string, *slack.Attachment, ...string) *slack.MessageResponse); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.MessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *slack.Attachment, ...string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
